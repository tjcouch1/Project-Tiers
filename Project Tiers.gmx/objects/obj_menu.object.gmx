<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//project variables
projectDirectory = "";
listsDirectory = "";
portraitsDirectory = "";
projectList = ds_list_create();
projectButtonList = ds_list_create();
listList = ds_list_create();
listButtonList = ds_list_create();
portraitNameList = ds_list_create();
portraitSpriteList = ds_list_create();
tierSetList = ds_list_create();
projectBackground = -1;
projectBackgroundObject = -1;
projectUnknownSprite = spr_unknownSprite;
projectArrowSprite = spr_arrowSprite;
projectAudioBuffer = -1;
projectAudio = -1;
unsaved = false;
heldPortrait = -1;

//window variables
windowWidthPrev = window_get_width();
windowHeightPrev = window_get_height();
refreshWindow = false;

//view variables
debug = true;
debugPrev = false;
showFPS = true;
selection = 0;
windowMouseXPrev = window_mouse_get_x();
windowMouseYPrev = window_mouse_get_y();
viewXList = 0;
viewYList = 0;
viewXDest = 0;
viewYDest = 0;
moveCamera = true;
tierSetXOrigin = -1;
tierSetYOrigin = -1;
tierSetWidth = -1;

//color vars
globalvar arrowTextColor, mainTextColor;
arrowTextColor = c_black;
mainTextColor = c_white;

//buttons
buttonCreate();
questionID = -1;//id for async event
questionDir = "";//directory for question at hand
questionNum = -1;//temporary number saved for the question at hand
dupeList = false;//whether or not the game is ready to duplicate a list
deleteList = false;

//initialize
findProjects();

//if (ds_list_size(projectList) == 1)
//    projectDirectory = ds_list_find_value(projectList, 0);
//loadProject();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>windowWidthPrev = window_get_width();
windowHeightPrev = window_get_height();
debugPrev = debug;
windowMouseXPrev = window_mouse_get_x();
windowMouseYPrev = window_mouse_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//window sizing
//if (keyboard_check_pressed(vk_f4))
//    window_set_fullscreen(!window_get_fullscreen());

if (window_get_width() != windowWidthPrev || window_get_height() != windowHeightPrev || refreshWindow)
    if (window_get_width() &gt; 0 &amp;&amp; window_get_height() &gt; 0)
    {
        view_wview[0] = round(window_get_width());
        view_hview[0] = round(window_get_height());
        view_wport[0] = view_wview[0];
        view_hport[0] = view_hview[0];
        surface_resize(application_surface, view_wview[0], view_hview[0]);
        
        if (instance_exists(projectBackgroundObject))
            if (sprite_exists(projectBackgroundObject.sprite_index))
            {
                projectBackgroundObject.numWidth = ceil(view_wview[0] / sprite_get_width(projectBackgroundObject.sprite_index));
                projectBackgroundObject.numHeight = ceil(view_wview[0] / sprite_get_height(projectBackgroundObject.sprite_index));
            }
        refreshWindow = false;
    }

//debug
if (debug != debugPrev)
    show_debug_overlay(debug);
    
//update buttons
buttonUpdate();

//edit lists
if (selection == 3)
{
    //check tierSet buttons
    var currTierSet, currPortrait, button, prevTierSet, char;
    var repositionTierSets = false;
    for (var i = 0; i &lt; ds_list_size(tierSetList); i++)
    {
        currTierSet = ds_list_find_value(tierSetList, i);
        
        button = currTierSet.bLeft;
        if (button.clicked &amp;&amp; i &gt; 0)
        {
            ds_list_delete(tierSetList, i);
            ds_list_insert(tierSetList, i - 1, currTierSet);
            repositionTierSets = true;
            unsaved = true;
            viewXDest = tierSetXOrigin + (i - 1) * tierSetWidth - view_wview[0] / 2;
            viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2;
            moveCamera = false;
            break;
        }
        
        button = currTierSet.bAdd;
        if (button.clicked &amp;&amp; questionID &lt; 0)
        {
            questionID = newPortraitID;
            get_string_async("Enter the name of the character you want to add.", "New Character");
            questionObjInd = currTierSet;
            unsaved = true;
            break;
        }
        
        button = currTierSet.bDuplicate;
        if (button.clicked &amp;&amp; questionID &lt; 0)
        {
            questionID = dupeTierSetID;
            questionObjInd = currTierSet;
            get_string_async("Enter the name of the new tier set.", currTierSet.name + " - Copy");
            unsaved = true;
            break;
        }
        
        button = currTierSet.bDelete;
        if (button.clicked &amp;&amp; questionID &lt; 0)
        {
            questionID = deleteTierSetID;
            questionObjInd = currTierSet;
            show_question_async("Are you sure you want to delete " + currTierSet.name + "?");
            unsaved = true;
            break;
        }
        
        button = currTierSet.bRename;
        if (button.clicked &amp;&amp; questionID &lt; 0)
        {
            questionID = renameTierSetID;
            questionObjInd = currTierSet;
            get_string_async("Enter the new name of the tier set.", currTierSet.name);
            unsaved = true;
            break;
        }
        
        button = currTierSet.bRight;
        if (button.clicked &amp;&amp; i &lt; ds_list_size(tierSetList) - 1)
        {
            ds_list_delete(tierSetList, i);
            ds_list_insert(tierSetList, i + 1, currTierSet);
            repositionTierSets = true;
            unsaved = true;
            viewXDest = tierSetXOrigin + (i + 1) * tierSetWidth - view_wview[0] / 2;
            viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2;
            moveCamera = false;
            break;
        }
        
        button = currTierSet.bRenameDate;
        if (button.clicked &amp;&amp; questionID &lt; 0)
        {
            questionID = renameTierDateID;
            questionObjInd = currTierSet;
            get_string_async("Enter the new date of the tier set.", currTierSet.date);
            unsaved = true;
            break;
        }
        
        button = currTierSet.bAddTier;
        if (button.clicked &amp;&amp; questionID &lt; 0)
        {
            questionID = newTierID;
            questionObjInd = currTierSet;
            get_string_async("Enter the name of the new tier.", "New Tier");
            unsaved = true;
            break;
        }
        
        var breaking = false;
        for (var j = 0; j &lt; ds_list_size(currTierSet.tierUpList); j++)
        {
            //tier up
            button = ds_list_find_value(currTierSet.tierUpList, j);
            if (button.clicked)
            {
                breaking = true;
                var count = 0;
                for (var k = 0; k &lt; ds_list_size(currTierSet.tierSetList); k++)
                    if (string_pos("\Tier", ds_list_find_value(currTierSet.tierSetList, k)) == 1)
                    {
                        if (count == j)
                        {
                            if (k &gt; 0)
                            {
                                var tempLine = ds_list_find_value(currTierSet.tierSetList, k);
                                ds_list_delete(currTierSet.tierSetList, k);
                                ds_list_insert(currTierSet.tierSetList, k - 1, tempLine);
                            }
                            break;
                        }
                        count++;
                    }
                repositionTierSets = true;
            }
            if (breaking)
                break;
            
            //tier down
            button = ds_list_find_value(currTierSet.tierDownList, j);
            if (button.clicked)
            {
                breaking = true;
                var count = 0;
                for (var k = 0; k &lt; ds_list_size(currTierSet.tierSetList); k++)
                    if (string_pos("\Tier", ds_list_find_value(currTierSet.tierSetList, k)) == 1)
                    {
                        if (count == j)
                        {
                            if (k &lt; ds_list_size(currTierSet.tierSetList) - 1)
                            {
                                var tempLine = ds_list_find_value(currTierSet.tierSetList, k);
                                ds_list_delete(currTierSet.tierSetList, k);
                                ds_list_insert(currTierSet.tierSetList, k + 1, tempLine);
                            }
                            break;
                        }
                        count++;
                    }
                repositionTierSets = true;
            }
            if (breaking)
                break;
            
            //delete tier
            button = ds_list_find_value(currTierSet.tierDeleteList, j);
            if (button.clicked)
            {
                breaking = true;
                var count = 0;
                for (var k = 0; k &lt; ds_list_size(currTierSet.tierSetList); k++)
                    if (string_pos("\Tier", ds_list_find_value(currTierSet.tierSetList, k)) == 1)
                    {
                        if (count == j)
                        {
                            ds_list_delete(currTierSet.tierSetList, k);
                            with (ds_list_find_value(currTierSet.tierUpList, j))
                                instance_destroy();
                            with (ds_list_find_value(currTierSet.tierDownList, j))
                                instance_destroy();
                            with (ds_list_find_value(currTierSet.tierDeleteList, j))
                                instance_destroy();
                            with (ds_list_find_value(currTierSet.tierRenameList, j))
                                instance_destroy();
                            ds_list_delete(currTierSet.tierUpList, j);
                            ds_list_delete(currTierSet.tierDownList, j);
                            ds_list_delete(currTierSet.tierDeleteList, j);
                            ds_list_delete(currTierSet.tierRenameList, j);
                            break;
                        }
                        count++;
                    }
                repositionTierSets = true;
            }
            if (breaking)
                break;
                
            //tier rename
            button = ds_list_find_value(currTierSet.tierRenameList, j);
            if (button.clicked)
            {
                breaking = true;
                var count = 0;
                for (var k = 0; k &lt; ds_list_size(currTierSet.tierSetList); k++)
                    if (string_pos("\Tier", ds_list_find_value(currTierSet.tierSetList, k)) == 1)
                    {
                        if (count == j)
                        {
                            questionID = renameTierID;
                            questionObjInd = currTierSet;
                            questionNum = count;
                            get_string_async("Enter the new name of the tier.", string_copy(ds_list_find_value(currTierSet.tierSetList, k), 7, string_length(ds_list_find_value(currTierSet.tierSetList, k)) - 6));
                            unsaved = true;
                            break;
                        }
                        count++;
                    }
            }
            if (breaking)
                break;
        }
        if (breaking)
            break;
    }
    
    //check to see if user clicks a portrait
    if (mouse_check_button_pressed(mb_left))
    {
        var portrait;
        for (var i = 0; i &lt; instance_number(obj_portrait); i++)
        {
            portrait = instance_find(obj_portrait, i);
            if (position_meeting(mouse_x, mouse_y, portrait))
            {
                heldPortrait = portrait;
                portrait.mouseHold = true;
                moveCamera = false;
                unsaved = true;
                break;
            }
        }
    }
    
    //redo tier if the user moves the portrait
    if (heldPortrait &gt;= 0 &amp;&amp; mouse_check_button_released(mb_left))
    {
        var currTierSet = heldPortrait.owner;
        with (currTierSet)
        {
            var portrait, above, below, left, right;
            above = -1;
            below = -1;
            left = -1;
            right = -1;
            
            for (var i = 0; i &lt; ds_list_size(portraitList); i++)
            {
                portrait = ds_list_find_value(portraitList, i);
                if (portrait == other.heldPortrait)
                    continue;
                
                if (above &gt; 0)
                {
                    if ((portrait.yDest &gt; above.yDest || (portrait.yDest == above.yDest &amp;&amp; abs(other.heldPortrait.xDest - portrait.xDest) &lt; abs(other.heldPortrait.xDest - above.xDest))) &amp;&amp; portrait.yDest &lt;= other.heldPortrait.yDest)
                        above = portrait;
                }
                else if (portrait.yDest &lt;= other.heldPortrait.yDest)
                    above = portrait;
                    
                if (below &gt; 0)
                {
                    if ((portrait.yDest &lt; below.yDest || (portrait.yDest == below.yDest &amp;&amp; abs(other.heldPortrait.xDest - portrait.xDest) &lt; abs(other.heldPortrait.xDest - below.xDest))) &amp;&amp; portrait.yDest &gt; other.heldPortrait.yDest)
                        below = portrait;
                }
                else if (portrait.yDest &gt; other.heldPortrait.yDest)
                    below = portrait;
            }
            
            if (above &gt;= 0)
                if (abs(other.heldPortrait.yDest - above.yDest) &lt; sprite_get_height(other.projectUnknownSprite) / 4)
                {
                    if (other.heldPortrait.xDest - above.xDest &gt;= 0)
                        left = above;
                    else right = above;
                }
            if (below &gt;= 0 &amp;&amp; left &lt; 0 &amp;&amp; right &lt; 0)
                if (abs(other.heldPortrait.yDest - below.yDest) &lt; sprite_get_height(other.projectUnknownSprite) / 4)
                {
                    if (other.heldPortrait.xDest - below.xDest &gt;= 0)
                        left = below;
                    else right = below;
                }
            
            //move portrait
            if (left &gt;= 0 || right &gt;= 0)//add to another line
            {
                var setLine, cutLine, portraitIndex;
                var leaveLine = false;
                portrait = other.heldPortrait;
                
                //remove portrait
                for (var j = 0; j &lt; ds_list_size(tierSetList); j++)
                {
                    setLine = ds_list_find_value(tierSetList, j);
                    if (string_char_at(setLine, 1) != "\")
                        if (string_pos(portrait.character, setLine) &gt; 0)
                        {
                            cutLine = string_copy(setLine, 1, string_pos(portrait.character, setLine) - 1);
                            if (string_length(string_replace(setLine, portrait.character, "")) &gt; 0)
                            {
                                if (cutLine == "")
                                    var newLine = string_replace(setLine, portrait.character + ", ", "");
                                else var newLine = string_replace(setLine, ", " + portrait.character, "");
                                ds_list_replace(tierSetList, j, newLine);
                                leaveLine = true;
                            }
                            else ds_list_delete(tierSetList, j);
                            break;
                        }
                }
                
                //add portrait
                for (var j = 0; j &lt; ds_list_size(tierSetList); j++)
                {
                    setLine = ds_list_find_value(tierSetList, j);
                    if (string_char_at(setLine, 1) != "\")
                        if (left &gt;= 0)
                        {
                            if (string_pos(left.character, setLine) &gt; 0)
                            {
                                var newLine = string_insert(", " + portrait.character, setLine, string_pos(left.character, setLine) + string_length(left.character));
                                ds_list_replace(tierSetList, j, newLine);
                                break;
                            }
                        }
                        else if (string_pos(right.character, setLine) &gt; 0)
                        {
                            var newLine = string_insert(portrait.character + ", ", setLine, string_pos(right.character, setLine));
                            ds_list_replace(tierSetList, j, newLine);
                            break;
                        }
                }
            }
            else if (above &gt;= 0 || below &gt;= 0)//put on new line
            {
                var setLine, cutLine, portraitIndex;
                leaveLine = false;
                portrait = other.heldPortrait;
                if (above &gt;= 0)
                    var otherPortrait = above;
                else var otherPortrait = below;
                
                //remove portrait
                for (var j = 0; j &lt; ds_list_size(tierSetList); j++)
                {
                    setLine = ds_list_find_value(tierSetList, j);
                    if (string_char_at(setLine, 1) != "\")
                        if (string_pos(portrait.character, setLine) &gt; 0)
                        {
                            cutLine = string_copy(setLine, 1, string_pos(portrait.character, setLine) - 1);
                            if (string_length(string_replace(setLine, portrait.character, "")) &gt; 0)
                            {
                                if (cutLine == "")
                                    var newLine = string_replace(setLine, portrait.character + ", ", "");
                                else var newLine = string_replace(setLine, ", " + portrait.character, "");
                                ds_list_replace(tierSetList, j, newLine);
                                leaveLine = true;
                            }
                            else ds_list_delete(tierSetList, j);
                            break;
                        }
                }
                
                //add portrait
                for (var j = 0; j &lt; ds_list_size(tierSetList); j++)
                {
                    setLine = ds_list_find_value(tierSetList, j);
                    if (string_char_at(setLine, 1) != "\")
                        if (string_pos(otherPortrait.character, setLine) &gt; 0)
                        {
                            if (otherPortrait == above)
                                ds_list_insert(tierSetList, j + 1, portrait.character);
                            else ds_list_insert(tierSetList, j, portrait.character);
                            break;
                        }
                }
            }
            
            //redo ranks
            var setLine, cutLine;
            var currentRank = 1;
            for (var i = 0; i &lt; ds_list_size(tierSetList); i++)
            {
                setLine = ds_list_find_value(tierSetList, i);
                if (string_char_at(setLine, 1) != "\")
                {
                    cutLine = "";
                    for (var j = 1; j &lt;= string_length(setLine) + 1; j++)
                    {
                        if (j &lt;= string_length(setLine))
                        {
                            if (string_char_at(setLine, j) != ",")
                                cutLine += string_char_at(setLine, j);
                            else
                            {
                                ds_list_replace(rankList, ds_list_find_index(characterList, cutLine), currentRank);
                                cutLine = "";
                                j += 1;
                            }
                        }
                        else
                        {
                            ds_list_replace(rankList, ds_list_find_index(characterList, cutLine), currentRank);
                            cutLine = "";
                            j += 1;
                            currentRank += string_count(",", setLine) + 1;
                        }
                    }
                }
            }
        }
        
        repositionTierSets = true;
        heldPortrait = -1;
    }
    
    //see if user deletes a portrait
    if (keyboard_check_pressed(vk_delete))
    {
        var portrait;
        for (var i = 0; i &lt; instance_number(obj_portrait); i++)
        {
            portrait = instance_find(obj_portrait, i);
            if (position_meeting(mouse_x, mouse_y, portrait))
            {
                //delete portrait
                var currTierSet, setLine, cutLine, portraitIndex;
                currTierSet = portrait.owner;
                
                with (currTierSet)
                {
                    for (var j = 0; j &lt; ds_list_size(tierSetList); j++)
                    {
                        setLine = ds_list_find_value(tierSetList, j);
                        if (string_char_at(setLine, 1) != "\")
                            if (string_pos(portrait.character, setLine) &gt; 0)
                            {
                                cutLine = string_copy(setLine, 1, string_pos(portrait.character, setLine) - 1);
                                if (string_length(string_replace(setLine, portrait.character, "")) &gt; 0)
                                {
                                    if (cutLine == "")
                                        var newLine = string_replace(setLine, portrait.character + ", ", "");
                                    else var newLine = string_replace(setLine, ", " + portrait.character, "");
                                    ds_list_replace(tierSetList, j, newLine);
                                }
                                else ds_list_delete(tierSetList, j);
                                break;
                            }
                    }
                    
                    portraitIndex = ds_list_find_index(portraitList, portrait);
                    if (portraitIndex &gt;= 0)
                    {
                        var currRank;
                        for (var j = 0; j &lt; ds_list_size(rankList); j++)
                        {
                            currRank = ds_list_find_value(rankList, j);
                            if (currRank &gt; ds_list_find_value(rankList, portraitIndex))
                                ds_list_replace(rankList, j, ds_list_find_value(rankList, j) - 1);
                        }
                    
                        ds_list_delete(portraitList, portraitIndex);
                        ds_list_delete(characterList, portraitIndex);
                        ds_list_delete(rankList, portraitIndex);
                    }
                }
                
                with (portrait)
                    instance_destroy();
                
                repositionTierSets = true;
                break;
            }
        }
        heldPortrait = -1;
    }
    
    if (repositionTierSets)
        recalculateTierSets(-1);
}

//move camera
if (mouse_check_button_released(mb_left) || mouse_check_button_released(mb_right))
{
    if (moveCamera || mouse_check_button_released(mb_right))
    {
        viewXDest = view_xview[0] - (window_mouse_get_x() - windowMouseXPrev) * 10;
        viewYDest = view_yview[0] - (window_mouse_get_y() - windowMouseYPrev) * 10;
    }
    if (mouse_check_button_released(mb_left))
        moveCamera = true;
}

if ((mouse_check_button(mb_left) &amp;&amp; moveCamera) || mouse_check_button(mb_right))
{
    view_xview[0] -= window_mouse_get_x() - windowMouseXPrev;
    view_yview[0] -= window_mouse_get_y() - windowMouseYPrev;
}
else
{
    view_xview[0] = lerp(view_xview[0], viewXDest, .1);
    view_yview[0] = lerp(view_yview[0], viewYDest, .1);
}

if (keyboard_check_pressed(vk_space) &amp;&amp; (selection == 2 || selection == 3))
{
    viewXDest = viewXList;
    viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2 * (selection == 3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (questionID)
{
    case newListID:
        if (ds_map_find_value(async_load, "status"))
        {
            var listName = ds_map_find_value(async_load, "result");
            if (listName == "")
                listName = "New List";
            var count = 1;
            while (file_exists(projectDirectory + "lists\" + listName + ".list"))
            {
                listName = "New List " + count;
                count++;
            }
            closeList();
            listDirectory = projectDirectory + "lists\" + listName + ".list";
            loadList();
            selection = 2;
        }
        break;
    case dupeListID:
        if (ds_map_find_value(async_load, "status"))
        {
            var dupeDir;
            for (var i = string_length(questionDir); i &gt; 0; i--)
                if (string_char_at(questionDir, i) == "\")
                {
                    dupeDir = string_copy(questionDir, 1, i) + ds_map_find_value(async_load, "result") + ".list";
                    break;
                }
            //show_debug_message(dupeDir);
            file_copy(questionDir, dupeDir);
            findLists();
        }
        questionDir = "";
        dupeList = false;
        break;
    case deleteListID:
        if (ds_map_find_value(async_load, "status"))
            if (file_exists(questionDir))
            {
                file_delete(questionDir);
                findLists();
            }
        questionDir = "";
        deleteList = false;
        break;
    case unsavedID:
        if (ds_map_find_value(async_load, "status"))
        {
            selection = 2;
            unsaved = false;
            closeList();
            loadList();
        }
        break;
    case newTierSetID:
        if (ds_map_find_value(async_load, "status"))
        {
            var tierSet;
            tierSet = instance_create(tierSetXOrigin + tierSetWidth * ds_list_size(tierSetList), tierSetYOrigin, obj_tierSet);
            tierSet.xDest = tierSet.x;
            tierSet.yDest = tierSet.y;
            tierSet.name = ds_map_find_value(async_load, "result");
            viewXDest = tierSetXOrigin + tierSetWidth * ds_list_size(tierSetList) - view_wview[0] / 2;
            viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2;
            moveCamera = false;
            ds_list_add(tierSetList, tierSet);
        }
        break;
    case dupeTierSetID:
        if (ds_map_find_value(async_load, "status"))
        {
            var tierSet, currTierSet;
            currTierSet = questionObjInd;
            tierSet = instance_create(currTierSet.x, currTierSet.y, obj_tierSet);//tierSetXOrigin + tierSetWidth * (ds_list_find_index(tierSetList, currTierSet) + 1), tierSetYOrigin, obj_tierSet);
            //tierSet.xDest = tierSet.x;
            tierSet.yDest = tierSet.y;
            tierSet.name = ds_map_find_value(async_load, "result");
            tierSet.date = currTierSet.date;
            viewXDest = tierSetXOrigin + tierSetWidth * (ds_list_find_index(tierSetList, currTierSet) + 1) - view_wview[0] / 2;
            viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2;
            moveCamera = false;
            ds_list_insert(tierSetList, ds_list_find_index(tierSetList, currTierSet) + 1, tierSet);
            
            with (tierSet)
            {
                //tierSetList
                for (var i = 0; i &lt; ds_list_size(currTierSet.tierSetList); i++)
                    ds_list_add(tierSetList, ds_list_find_value(currTierSet.tierSetList, i));
                    
                var char, portrait, newPortrait;
                //characterList, rankList, portraitList
                for (var i = 0; i &lt; ds_list_size(currTierSet.characterList); i++)
                {
                    char = ds_list_find_value(currTierSet.characterList, i);
                    portrait = ds_list_find_value(currTierSet.portraitList, i);
                    ds_list_add(characterList, char);
                    ds_list_add(rankList, ds_list_find_value(currTierSet.rankList, i));
                    
                    newPortrait = instance_create(portrait.x, portrait.y, obj_portrait);
                    ds_list_add(portraitList, newPortrait);
                    newPortrait.owner = id;
                    newPortrait.sprite_index = other.projectUnknownSprite;
                    newPortrait.character = char;
                    
                    //find portrait sprite
                    for (var j = 0; j &lt; ds_list_size(other.portraitNameList); j++)
                        if (ds_list_find_value(other.portraitNameList, j) == char)
                            newPortrait.sprite_index = ds_list_find_value(other.portraitSpriteList, j);
                }
                
                for (var i = 0; i &lt; ds_list_size(currTierSet.tierUpList); i++)
                {
                    button = instance_create(x, y, obj_button);
                    button.message = "Up";
                    button.sprite_index = spr_arrowButton;
                    button.selection = 3;
                    button.dontchangexy = true;
                    button.noscale = true;
                    button.drawDraw = true;
                    button.image_xscale = 3 / 4;
                    button.image_yscale = 3 / 4;
                    button.image_angle = 90;
                    button.xoff = - button.sprite_width * 7 / 2;
                    button.yoff = 0;
                    ds_list_add(tierUpList, button);
                    
                    button = instance_create(x, y, obj_button);
                    button.message = "Down";
                    button.sprite_index = spr_arrowButton;
                    button.selection = 3;
                    button.dontchangexy = true;
                    button.noscale = true;
                    button.drawDraw = true;
                    button.image_xscale = 3 / 4;
                    button.image_yscale = 3 / 4;
                    button.image_angle = 270;
                    button.xoff = - button.sprite_width * 7 / 2;
                    button.yoff = 0;
                    ds_list_add(tierDownList, button);
                    
                    button = instance_create(x, y, obj_button);
                    button.message = "Delete";
                    button.sprite_index = spr_deleteButton;
                    button.selection = 3;
                    button.dontchangexy = true;
                    button.noscale = true;
                    button.drawDraw = true;
                    button.image_xscale = 3 / 4;
                    button.image_yscale = 3 / 4;
                    button.xoff = button.sprite_width * 7 / 2;
                    button.yoff = 0;
                    ds_list_add(tierDeleteList, button);
                            
                    button = instance_create(x, y, obj_button);
                    button.message = "Rename";
                    button.sprite_index = spr_renameButton;
                    button.selection = 3;
                    button.dontchangexy = true;
                    button.noscale = true;
                    button.drawDraw = true;
                    button.image_xscale = 3 / 4;
                    button.image_yscale = 3 / 4;
                    button.xoff = button.sprite_width * 7 / 2;
                    button.yoff = 0;
                    ds_list_add(tierRenameList, button);
                }
            }
            
            recalculateTierSets(-1);
        }
        break;
    case deleteTierSetID:
        if (ds_map_find_value(async_load, "status"))
        {
            var tierSet = questionObjInd;
            if (instance_exists(tierSet) &amp;&amp; tierSet.object_index == obj_tierSet)
            {
                for (var j = 0; j &lt; ds_list_size(tierSet.portraitList); j++)
                {
                    portrait = ds_list_find_value(tierSet.portraitList, j);
                    if (instance_exists(portrait) &amp;&amp; portrait.object_index == obj_portrait)
                        with (portrait)
                            instance_destroy();
                }
                with (tierSet)
                    instance_destroy();
                ds_list_delete(tierSetList, ds_list_find_index(tierSetList, tierSet));
            }
            
            recalculateTierSets(-1);
        }
        break;
    case newPortraitID:
        if (ds_map_find_value(async_load, "status"))
        {
            var char, currTierSet, newPortrait;
            currTierSet = questionObjInd;
            //currTierSet = ds_list_find_index(tierSetList, questionObjInd);
            char = "@" + ds_map_find_value(async_load, "result") + "@";
            
            var newPor = true;
            for (var i = 0; i &lt; ds_list_size(currTierSet.characterList); i++)
                if (ds_list_find_value(currTierSet.characterList, i) == char)
                {
                    newPor = false;
                    break;
                }
            if (newPor)
            {
                with (currTierSet)
                {
                    newPortrait = instance_create(x, y, obj_portrait);
                    newPortrait.owner = currTierSet;
                    newPortrait.sprite_index = other.projectUnknownSprite;
                    newPortrait.character = char;
                    
                    //newPortrait.rank = 1;
                    
                    //increase all others' ranks by 1
                    for (var i = 0; i &lt; ds_list_size(rankList); i++)
                        ds_list_replace(rankList, i, ds_list_find_value(rankList, i) + 1);
                    
                    ds_list_add(characterList, char);
                    ds_list_add(portraitList, newPortrait);
                    ds_list_add(rankList, 1);
                    
                    /*
                    //assign rankChange
                    var tierSetPrev;
                    if (ds_list_find_index(other.tierSetList, id) &gt; 0)
                    {
                        tierSetPrev = ds_list_find_value(other.tierSetList, ds_list_find_index(other.tierSetList, id));
                        for (var j = 0; j &lt; ds_list_size(tierSetPrev.characterList); j++)
                            if (char == ds_list_find_value(tierSetPrev.characterList, j))
                            {
                                newPortrait.rankChange = ds_list_find_value(tierSetPrev.rankList, j) - 1;
                                break;
                            }
                            else newPortrait.rankChange = -3.14159;
                    }
                    else newPortrait.rankChange = -3.14159;
                    */
                    
                    //find portrait sprite
                    for (var j = 0; j &lt; ds_list_size(other.portraitNameList); j++)
                        if (ds_list_find_value(other.portraitNameList, j) == char)
                            newPortrait.sprite_index = ds_list_find_value(other.portraitSpriteList, j);
                    
                    //assign portrait to its location
                    var setLine, cutLine, place, charNum;
                    for (var j = 0; j &lt; ds_list_size(tierSetList) + 1; j++)
                    {
                        if (j &lt; ds_list_size(tierSetList))
                        {
                            setLine = ds_list_find_value(tierSetList, j);
                            if (string_char_at(setLine, 1) != "\" || string_length(setLine) == 0)
                            {
                                ds_list_insert(tierSetList, j, char);
                                //place = 1 / 2;
                                //charNum = 1;
                                //newPortrait.xOwnerOffset = (place - (charNum / 2)) * sprite_get_width(newPortrait.sprite_index) * 2;
                                //newPortrait.yOwnerOffset = (j + 1.5) * (sprite_get_height(newPortrait.sprite_index) + 2);
                                break;
                            }
                        }
                        else 
                        {
                            ds_list_add(tierSetList, char);
                            break;
                        }
                    }
                    if (ds_list_size(tierSetList) == 0)
                        ds_list_add(tierSetList, char);
                }
                recalculateTierSets(-1);
            }
        }
        break;
    case renameTierSetID:
        if (ds_map_find_value(async_load, "status"))
            questionObjInd.name = ds_map_find_value(async_load, "result");
        break;
    case renameTierDateID:
        if (ds_map_find_value(async_load, "status"))
            questionObjInd.date = ds_map_find_value(async_load, "result");
        break;
    case newTierID:
        if (ds_map_find_value(async_load, "status"))
        {
            ds_list_insert(questionObjInd.tierSetList, 0, "\Tier " + ds_map_find_value(async_load, "result"));
            
            with (questionObjInd)
            {
                button = instance_create(x, y, obj_button);
                button.message = "Up";
                button.sprite_index = spr_arrowButton;
                button.selection = 3;
                button.dontchangexy = true;
                button.noscale = true;
                button.drawDraw = true;
                button.image_xscale = 3 / 4;
                button.image_yscale = 3 / 4;
                button.image_angle = 90;
                button.xoff = - button.sprite_width * 7 / 2;
                button.yoff = 0;
                ds_list_insert(tierUpList, 0, button);
                
                button = instance_create(x, y, obj_button);
                button.message = "Down";
                button.sprite_index = spr_arrowButton;
                button.selection = 3;
                button.dontchangexy = true;
                button.noscale = true;
                button.drawDraw = true;
                button.image_xscale = 3 / 4;
                button.image_yscale = 3 / 4;
                button.image_angle = 270;
                button.xoff = - button.sprite_width * 7 / 2;
                button.yoff = 0;
                ds_list_insert(tierDownList, 0, button);
                
                button = instance_create(x, y, obj_button);
                button.message = "Delete";
                button.sprite_index = spr_deleteButton;
                button.selection = 3;
                button.dontchangexy = true;
                button.noscale = true;
                button.drawDraw = true;
                button.image_xscale = 3 / 4;
                button.image_yscale = 3 / 4;
                button.xoff = button.sprite_width * 7 / 2;
                button.yoff = 0;
                ds_list_insert(tierDeleteList, 0, button);
                        
                button = instance_create(x, y, obj_button);
                button.message = "Rename";
                button.sprite_index = spr_renameButton;
                button.selection = 3;
                button.dontchangexy = true;
                button.noscale = true;
                button.drawDraw = true;
                button.image_xscale = 3 / 4;
                button.image_yscale = 3 / 4;
                button.xoff = button.sprite_width * 7 / 2;
                button.yoff = 0;
                ds_list_insert(tierRenameList, 0, button);
            }
            
            recalculateTierSets(-1);
        }
        break;
    case renameTierID:
        if (ds_map_find_value(async_load, "status"))
        {
            var count = 0;
            for (var i = 0; i &lt; ds_list_size(questionObjInd.tierSetList); i++)
                if (string_pos("\Tier", ds_list_find_value(questionObjInd.tierSetList, i)) == 1)
                {
                    if (count == questionNum)
                    {
                        ds_list_replace(questionObjInd.tierSetList, i, "\Tier " + ds_map_find_value(async_load, "result"));
                        break;
                    }
                    count++;
                }
        }
        break;
}
questionID = -1;
questionObjInd = -1;
questionNum = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_default);
//var stringHeight = string_height("r");
if (showFPS)
{
    draw_set_color(mainTextColor);
    draw_set_valign(fa_bottom);
    draw_text(0, view_hview[0], fps);
    draw_set_valign(fa_top);
    draw_set_color(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_font(font_default);
/*var stringHeight = string_height("r");
var drawX = 0;
var drawY = 0;

drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
drawY += sprite_get_height(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
var currSprite;
for (var i = 0; i &lt;= ds_list_size(portraitSpriteList); i++)
{
    if (i &lt; ds_list_size(portraitSpriteList))
        currSprite = ds_list_find_value(portraitSpriteList, i);
    else currSprite = projectUnknownSprite;
    draw_sprite(currSprite, 0, drawX, drawY);
    drawY += sprite_get_height(currSprite) + 2;
    if (drawY + sprite_get_height(currSprite) / 2 &gt; view_hview[0])
    {
        drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) + 2;
        drawY = sprite_get_height(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
    }
}
draw_sprite(projectArrowSprite, 0, drawX, drawY);
drawY += sprite_get_height(projectArrowSprite) + 2;
if (drawY + sprite_get_height(projectArrowSprite) / 2 &gt; view_hview[0])
{
    drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) + 2;
    drawY = sprite_get_height(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
}


drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
drawY = 2;
for (var i = 0; i &lt; ds_list_size(projectList); i++)
{
    draw_text(drawX, drawY, ds_list_find_value(projectList, i));
    drawY += stringHeight;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
