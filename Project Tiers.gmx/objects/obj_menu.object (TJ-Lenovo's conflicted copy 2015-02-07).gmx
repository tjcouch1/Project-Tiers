<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//project variables
projectDirectory = "";
listsDirectory = "";
portraitsDirectory = "";
projectList = ds_list_create();
projectButtonList = ds_list_create();
listList = ds_list_create();
listButtonList = ds_list_create();
portraitNameList = ds_list_create();
portraitSpriteList = ds_list_create();
tierSetList = ds_list_create();
projectBackground = -1;
projectBackgroundObject = -1;
projectUnknownSprite = spr_unknownSprite;
projectArrowSprite = spr_arrowSprite;
projectAudioBuffer = -1;
projectAudio = -1;
unsaved = false;

//window variables
windowWidthPrev = window_get_width();
windowHeightPrev = window_get_height();
refreshWindow = false;

//view variables
debug = false;
debugPrev = false;
showFPS = true;
selection = 0;
windowMouseXPrev = window_mouse_get_x();
windowMouseYPrev = window_mouse_get_y();
viewXList = 0;
viewYList = 0;
viewXDest = 0;
viewYDest = 0;
moveCamera = true;
tierSetXOrigin = -1;
tierSetYOrigin = -1;
tierSetWidth = -1;

//color vars
globalvar arrowTextColor, mainTextColor;
arrowTextColor = c_black;
mainTextColor = c_white;

//buttons
buttonCreate();
questionID = -1;//id for async event
questionDir = "";//directory for question at hand
dupeList = false;//whether or not the game is ready to duplicate a list
deleteList = false;

//initialize
findProjects();

//if (ds_list_size(projectList) == 1)
//    projectDirectory = ds_list_find_value(projectList, 0);
//loadProject();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>windowWidthPrev = window_get_width();
windowHeightPrev = window_get_height();
debugPrev = debug;
windowMouseXPrev = window_mouse_get_x();
windowMouseYPrev = window_mouse_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//window sizing
//if (keyboard_check_pressed(vk_f4))
//    window_set_fullscreen(!window_get_fullscreen());

if (window_get_width() != windowWidthPrev || window_get_height() != windowHeightPrev || refreshWindow)
    if (window_get_width() &gt; 0 &amp;&amp; window_get_height() &gt; 0)
    {
        view_wview[0] = round(window_get_width());
        view_hview[0] = round(window_get_height());
        view_wport[0] = view_wview[0];
        view_hport[0] = view_hview[0];
        surface_resize(application_surface, view_wview[0], view_hview[0]);
        
        if (instance_exists(projectBackgroundObject))
            if (sprite_exists(projectBackgroundObject.sprite_index))
            {
                projectBackgroundObject.numWidth = ceil(view_wview[0] / sprite_get_width(projectBackgroundObject.sprite_index));
                projectBackgroundObject.numHeight = ceil(view_wview[0] / sprite_get_height(projectBackgroundObject.sprite_index));
            }
        refreshWindow = false;
    }

//debug
if (debug != debugPrev)
    show_debug_overlay(debug);
    
//update buttons
buttonUpdate();

//edit lists
if (selection == 3)
{
    //check tierSet buttons
    var currTierSet, currPortrait, button, prevTierSet, char;
    var repositionTierSets = false;
    for (var i = 0; i &lt; ds_list_size(tierSetList); i++)
    {
        currTierSet = ds_list_find_value(tierSetList, i);
        
        button = currTierSet.bLeft;
        if (button.clicked &amp;&amp; i &gt; 0)
        {
            ds_list_delete(tierSetList, i);
            ds_list_insert(tierSetList, i - 1, currTierSet);
            repositionTierSets = true;
            unsaved = true;
            viewXDest = tierSetXOrigin + (i - 1) * tierSetWidth - view_wview[0] / 2;
            break;
        }
        
        button = currTierSet.bAdd;
        if (button.clicked &amp;&amp; i &gt; 0)
        {
            questionID = newPortraitID;
            get_string_async("Enter the name of the character you want to add.", "New Character");
            questionObjInd = currTierSet;
            unsaved = true;
            break;
        }
        
        button = currTierSet.bRight;
        if (button.clicked &amp;&amp; i &lt; ds_list_size(tierSetList) - 1)
        {
            ds_list_delete(tierSetList, i);
            ds_list_insert(tierSetList, i + 1, currTierSet);
            repositionTierSets = true;
            unsaved = true;
            viewXDest = tierSetXOrigin + (i + 1) * tierSetWidth - view_wview[0] / 2;
            break;
        }
    }
    
    if (repositionTierSets)
        for (var i = 0; i &lt; ds_list_size(tierSetList); i++)
        {
            currTierSet = ds_list_find_value(tierSetList, i);
            currTierSet.xDest = tierSetXOrigin + i * tierSetWidth;
            viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2;
            moveCamera = false;
            
            //redo rank change
            for (var k = 0; k &lt; ds_list_size(currTierSet.portraitList); k++)
            {
                currPortrait = ds_list_find_value(currTierSet.portraitList, k);
                char = ds_list_find_value(currTierSet.characterList, k);
                if (i &gt; 0)
                {
                    prevTierSet = ds_list_find_value(tierSetList, i - 1);
                    for (var j = 0; j &lt; ds_list_size(prevTierSet.characterList); j++)
                        if (char == ds_list_find_value(prevTierSet.characterList, j))
                            currPortrait.rankChange = ds_list_find_value(prevTierSet.rankList, j) - ds_list_find_value(currTierSet.rankList, k);
                }
                else currPortrait.rankChange = -3.14159;
            }
        }
    
    //check to see if user clicks a portrait
    if (mouse_check_button_pressed(mb_left))
    {
        var portrait;
        for (var i = 0; i &lt; instance_number(obj_portrait); i++)
        {
            portrait = instance_find(obj_portrait, i);
            if (position_meeting(mouse_x, mouse_y, portrait))
            {
                portrait.mouseHold = true;
                moveCamera = false;
                unsaved = true;
                break;
            }
        }
    }
}

//move camera
if (mouse_check_button_released(mb_left) || mouse_check_button_released(mb_right))
{
    if (moveCamera || mouse_check_button_released(mb_right))
    {
        viewXDest = view_xview[0] - (window_mouse_get_x() - windowMouseXPrev) * 10;
        viewYDest = view_yview[0] - (window_mouse_get_y() - windowMouseYPrev) * 10;
    }
    if (mouse_check_button_released(mb_left))
        moveCamera = true;
}

if ((mouse_check_button(mb_left) &amp;&amp; moveCamera) || mouse_check_button(mb_right))
{
    view_xview[0] -= window_mouse_get_x() - windowMouseXPrev;
    view_yview[0] -= window_mouse_get_y() - windowMouseYPrev;
}
else
{
    view_xview[0] = lerp(view_xview[0], viewXDest, .1);
    view_yview[0] = lerp(view_yview[0], viewYDest, .1);
}

if (keyboard_check_pressed(vk_space) &amp;&amp; (selection == 2 || selection == 3))
{
    viewXDest = viewXList;
    viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2 * (selection == 3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (questionID)
{
    case newListID:
        if (ds_map_find_value(async_load, "status"))
        {
            var listName = ds_map_find_value(async_load, "result");
            if (listName == "")
                listName = "New List";
            var count = 1;
            while (file_exists(projectDirectory + "lists\" + listName + ".list"))
            {
                listName = "New List " + count;
                count++;
            }
            closeList();
            listDirectory = projectDirectory + "lists\" + listName + ".list";
            loadList();
            selection = 2;
        }
        break;
    case dupeListID:
        if (ds_map_find_value(async_load, "status"))
        {
            var dupeDir;
            for (var i = string_length(questionDir); i &gt; 0; i--)
                if (string_char_at(questionDir, i) == "\")
                {
                    dupeDir = string_copy(questionDir, 1, i) + ds_map_find_value(async_load, "result") + ".list";
                    break;
                }
            show_debug_message(dupeDir);
            file_copy(questionDir, dupeDir);
            findLists();
        }
        questionDir = "";
        dupeList = false;
        break;
    case deleteListID:
        if (ds_map_find_value(async_load, "status"))
            if (file_exists(questionDir))
            {
                file_delete(questionDir);
                findLists();
            }
        questionDir = "";
        deleteList = false;
        break;
    case unsavedID:
        if (ds_map_find_value(async_load, "status"))
        {
            selection = 2;
            unsaved = false;
            closeList();
            loadList();
        }
        break;
    case newTierSetID:
        if (ds_map_find_value(async_load, "status"))
        {
            tierSet = instance_create(tierSetXOrigin + tierSetWidth * ds_list_size(tierSetList), tierSetYOrigin, obj_tierSet);
            tierSet.xDest = tierSet.x;
            tierSet.yDest = tierSet.y;
            tierSet.name = ds_map_find_value(async_load, "result");
            viewXDest = tierSetXOrigin + tierSetWidth * ds_list_size(tierSetList) - view_wview[0] / 2;
            viewYDest = viewYList - sprite_get_height(spr_exitButton) * 2;
            moveCamera = false;
            ds_list_add(tierSetList, tierSet);
        }
        break;
    case newPortraitID:
        if (ds_map_find_value(async_load, "status"))
        {
            var char, currTierSet;
            currTierSet = ds_list_find_index(tierSetList, questionObjInd);
            //add portrait
        }
        break;
}
questionID = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_default);
//var stringHeight = string_height("r");
if (showFPS)
{
    draw_set_color(mainTextColor);
    draw_set_valign(fa_bottom);
    draw_text(0, view_hview[0], fps);
    draw_set_valign(fa_top);
    draw_set_color(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_font(font_default);
/*var stringHeight = string_height("r");
var drawX = 0;
var drawY = 0;

drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
drawY += sprite_get_height(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
var currSprite;
for (var i = 0; i &lt;= ds_list_size(portraitSpriteList); i++)
{
    if (i &lt; ds_list_size(portraitSpriteList))
        currSprite = ds_list_find_value(portraitSpriteList, i);
    else currSprite = projectUnknownSprite;
    draw_sprite(currSprite, 0, drawX, drawY);
    drawY += sprite_get_height(currSprite) + 2;
    if (drawY + sprite_get_height(currSprite) / 2 &gt; view_hview[0])
    {
        drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) + 2;
        drawY = sprite_get_height(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
    }
}
draw_sprite(projectArrowSprite, 0, drawX, drawY);
drawY += sprite_get_height(projectArrowSprite) + 2;
if (drawY + sprite_get_height(projectArrowSprite) / 2 &gt; view_hview[0])
{
    drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) + 2;
    drawY = sprite_get_height(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
}


drawX += sprite_get_width(ds_list_find_value(portraitSpriteList, 0)) / 2 + 2;
drawY = 2;
for (var i = 0; i &lt; ds_list_size(projectList); i++)
{
    draw_text(drawX, drawY, ds_list_find_value(projectList, i));
    drawY += stringHeight;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
