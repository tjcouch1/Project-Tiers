<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_button;
text = "";//text on button
type = 0;//type 0-click button. type 1-input button. type 2-hotkey button. type 3-ip button. type 4-toggle button. type 5-group select button.
//type 6-color selector. type 7-color swatch button. type 8-level select button
input = 0;//input text or numbers
message = "";//text above button
message2 = "";//text below button
image_speed = 0;
defaultcolor = c_white;//normal button color
selectcolor = c_red;//button color if selected (type 1 only)
selected = false;//whether or not this type 1 is currently selected
selectedprev = false;//selected from frame before
clicked = false;//whether or not button has been clicked this frame
maximum = 10000;//highest number/character count in input button
minimum = 0;//lowest number in input button
selection = -2;//what screen to display on
owner = obj_menu;//what selection to compare to when setting visibility
held = false;//whether or not button is being held this frame
on = 1;//type 4 whether or not the option is set on
showsprite = -1;//which sprite to show on the button
drawframe = false;//whether or not to draw the portrait frame behind the showsprite
colorswitch = false;//whether or not the showsprite uses the color_switch shader
charactername = "";//what character to represent. defaultcolors uses this var
defaultcolors = false;//whether or not the shader uses default colors for the characters
doubleclicked = false;//whether or not button has been doubleclicked this frame
doubleclicktimecap = room_speed / 3;//how long you can take to double click
doubleclicktime = doubleclicktimecap;
excludesymbols = false;//whether or not to exclude all symbols such as ~!@$%^&amp;*()_+|
showuni = false;//whether or not to show the unicode value of text
visiblemenu = true;//whether or not button is visible on menu
visibleplay = true;//whether or not button is visible in play
visibleserverclient = "";//visible on server, client, or both
group = "";//name of group button is in. used in type 5 for deselecting others in same group. used in 6 to disallow choosing all the same color
joystick = false;//whether or not hotkey button takes joystick input
colornum = 0;//what color the type 7 button holds
urlopen = "";//what url to open
controlvisible = true;//whether or not button controls its visibility
dontchangexy = false;//true means don't change x and y based on screen size
roomorder = -1;//which order the level is in the room order
visibleall = true;//whether or not it is visible
noscale = false;//if true, don't scale
clickPress = false;//if true, this button was pressed
drawDraw = false;//if true, draws on draw, not drawGUI
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selectedprev = selected;
if (clicked)
    doubleclicktime--;
if (doubleclicktime &lt; doubleclicktimecap)
    doubleclicktime--;
if (doubleclicktime == 0)
    doubleclicktime = doubleclicktimecap;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//handles button image_index and whether or not button is clicked

var mousex = window_mouse_get_x();// - window_x;
var mousey = window_mouse_get_y();// - window_y;

if (drawDraw)
{
    mousex = mouse_x;
    mousey = mouse_y;
}

if (visible)
{
    if (!dontchangexy)
    {
        x = view_wview[0] / 2;
        //x = xstart * window_width / view_wview[0] / 3;
        //y = ystart * window_height / view_hview[0] / 3;
    }
    if (position_meeting(mousex, mousey, id))
    {
        if (!mouse_check_button(mb_left))
            image_index = 1;
        
        if (mouse_check_button_pressed(mb_left))
        {
            audio_stop_sound(snd_button_click);
            audio_play_sound(snd_button_click, 1, false);
            clickPress = true;
        }
        
        if (mouse_check_button(mb_left) &amp;&amp; clickPress)
        {
            image_index = 2;
            held = true;
        }
        else held = false;
        
        if (mouse_check_button_released(mb_left) &amp;&amp; clickPress)
        {
            clicked = true;
            clickPress = false;
            audio_stop_sound(snd_button_release);
            audio_play_sound(snd_button_release, 1, false);
        }
        else clicked = false;
    }
    else 
    {
        image_index = 0;
        clicked = false;
        held = false;
        if (clickPress)
        {
            clickPress = false;
            audio_stop_sound(snd_button_release);
            audio_play_sound(snd_button_release, 1, false);
        }
    }
    
}

//input button update, selected update, image_xscale update
if (type == 1)
{
    if (mouse_check_button(mb_left))
        if (!position_meeting(mousex, mousey, id))
            selected = false;
    if (visible)
        if (mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mousex, mousey, id))
        {
            selected = true;
            owner.lastselected = id;
        }
    if (selected &amp;&amp; !selectedprev)
    {
        with (obj_button)
            if (id != other.id)
                selected = false;
        switch (input)
        {
            case 0:
                keyboard_string = text;
                break;
            case 1:
                keyboard_string = string(text);
                break;
        }
    }
    if (selected)
        switch (input)
        {
            case 0:
                text = string_copy(keyboard_string, 1, maximum);
                keyboard_string = text;
                //text = keyboard_string;
                break;
            case 1:
                text = clamp(real(string_digits(keyboard_string)), -1, maximum);
                keyboard_string = string(text);
                break;
        }
    if (!selected &amp;&amp; selectedprev)
    {
        if (input == 0)
        {
            if (excludesymbols)
            {
                text = string_replace_all(text, "`", "");
                text = string_replace_all(text, "~", "");
                text = string_replace_all(text, "!", "");
                text = string_replace_all(text, "@", "");
                text = string_replace_all(text, "$", "");
                text = string_replace_all(text, "%", "");
                text = string_replace_all(text, "^", "");
                text = string_replace_all(text, "&amp;", "");
                text = string_replace_all(text, "*", "");
                text = string_replace_all(text, "(", "");
                text = string_replace_all(text, ")", "");
                text = string_replace_all(text, "-", "");
                text = string_replace_all(text, "_", "");
                text = string_replace_all(text, "=", "");
                text = string_replace_all(text, "+", "");
                text = string_replace_all(text, "|", "");
                text = string_replace_all(text, "[", "");
                text = string_replace_all(text, "{", "");
                text = string_replace_all(text, "]", "");
                text = string_replace_all(text, "}", "");
                text = string_replace_all(text, ";", "");
                text = string_replace_all(text, ":", "");
                text = string_replace_all(text, "'", "");
                text = string_replace_all(text, '"', "");
                text = string_replace_all(text, ",", "");
                text = string_replace_all(text, "&lt;", "");
                text = string_replace_all(text, ".", "");
                text = string_replace_all(text, "&gt;", "");
                text = string_replace_all(text, "/", "");
                text = string_replace_all(text, "?", "");
                text = string_replace_all(text, "\", "");
                text = string_replace_all(text, "#", "");
            }
            
            if (string_length(text) &lt; minimum)
            {
                repeat (minimum - string_length(text))
                    text += "a";
            }
        }
        if (input == 1)
            text = clamp(text, minimum, maximum);
    }
}

//hotkey button
if (type == 2)
{
    if (mouse_check_button(mb_left) &amp;&amp; !position_meeting(mousex, mousey, id))
        selected = false;
    if (visible)
        if (mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mousex, mousey, id))
        {
            selected = true;
            owner.lastselected = id;
        }
    if (selected &amp;&amp; !selectedprev)
    {
        with (obj_button)
            if (id != other.id)
                selected = false;
    }
    if (selected)
        if (!joystick)
        {
            if (keyboard_key != 0)
            {
                text = keyboard_key;
                selected = false;
            }
        }
        else
        {
            if (joystick_exists(1))
            {
                for (var a = 1; a &lt;= joystick_buttons(1); a++;)
                    if (joystick_check_button(1, a))
                    {
                        text = a;
                        selected = false;
                    }
                switch (joystick_direction(1))
                {
                    case vk_numpad2:
                        text = 33;
                        selected = false;
                        break;
                    case vk_numpad4:
                        text = 34;
                        selected = false;
                        break;
                    case vk_numpad6:
                        text = 35;
                        selected = false;
                        break;
                    case vk_numpad8:
                        text = 36;
                        selected = false;
                        break;
                }
            }
            if (joystick_exists(2))
            {
                for (var a = 1; a &lt;= joystick_buttons(2); a++;)
                    if (joystick_check_button(2, a))
                    {
                        text = a;
                        selected = false;
                    }
                switch (joystick_direction(2))
                {
                    case vk_numpad2:
                        text = 33;
                        selected = false;
                        break;
                    case vk_numpad4:
                        text = 34;
                        selected = false;
                        break;
                    case vk_numpad6:
                        text = 35;
                        selected = false;
                        break;
                    case vk_numpad8:
                        text = 36;
                        selected = false;
                        break;
                }
            }
        }
}

//ip button
if (type == 3)
{
    if (mouse_check_button(mb_left) &amp;&amp; !position_meeting(mousex, mousey, id))
        selected = false;
    if (visible)
        if (mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mousex, mousey, id))
        {
            selected = true;
            owner.lastselected = id;
            owner.lastip = id;
            owner.i_ip.text = text;
        }
    if (selected &amp;&amp; !selectedprev)
    {
        with (obj_button)
            if (id != other.id)
                selected = false;
    }
}

//weapon select button
if (type == 4)
{
    if (clicked)
        if (on == 1)
            on = 0;
        else on = 1;
    if (doubleclicktime == doubleclicktimecap)
        doubleclicked = false;
    if (doubleclicktime &lt; doubleclicktimecap &amp;&amp; clicked)
    {
        on = 2;
        doubleclicktime = doubleclicktimecap;
        doubleclicked = true;
    }
}

//character select button
if (type == 5)
    if (clicked)
    {
        on = 1;
        if (group != "")
            with (obj_button)
                if (group == other.group &amp;&amp; id != other.id)
                    on = 0;
    }

//color selector button
if (type == 6)
{
    if (mouse_check_button(mb_left) &amp;&amp; !position_meeting(mousex, mousey, id))
        selected = false;
    if (visible)
        if (mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mousex, mousey, id))
        {
            selected = true;
            owner.lastselected = id;
        }
    if (selected &amp;&amp; !selectedprev)
    {
        with (obj_button)
            if (id != other.id)
                selected = false;
    }
}

//color swatch button
if (type == 7)
    if (clicked)
    {
        if (owner.lastselected.type == 6 &amp;&amp; owner.lastselected.visible)
        {
            var buttonsingroup = 0;
            var buttonswithsamecolor = 0;
            var button;
            for (var a = 0; a &lt; instance_number(obj_button); a++;)
            {
                button = instance_find(obj_button, a);
                if (button.group == owner.lastselected.group)
                {
                    buttonsingroup++;
                    if (button.colornum == colornum)
                        buttonswithsamecolor++;
                }
            }
            if (buttonswithsamecolor + 1 &lt; buttonsingroup)
                owner.lastselected.colornum = colornum;
        }
    }
    
//level select button
if (type == 8)
{
    if (clicked)
        if (on == 1)
            on = 0;
        else on = 1;
    if (doubleclicktime == doubleclicktimecap)
        doubleclicked = false;
    if (doubleclicktime &lt; doubleclicktimecap &amp;&amp; clicked)
    {
        on = 2;
        if (group != "")
            with (obj_button)
                if (group == other.group &amp;&amp; id != other.id &amp;&amp; on == 2)
                    on = 1;
        doubleclicktime = doubleclicktimecap;
        doubleclicked = true;
    }
}

if (visible)
{
    buttonScale(id);
    if (clicked)
        if (urlopen != "")
            url_open(urlopen);
}
    
if (controlvisible)
    if (visibleall)
    {
        //if (instance_exists(owner))
        if (owner.selection != -2)
        {
            if (selection == owner.selection)
                visible = true;
            else visible = false;
            if (selection == -1 &amp;&amp; ((owner.selection != 0 &amp;&amp; room == room_menu) || (room != room_menu)))
                visible = true;
        }
        else visible = false;
        
        if (room == room_menu &amp;&amp; !visiblemenu)
            visible = false;
        if (room != room_menu &amp;&amp; !visibleplay)
            visible = false;
    }
    else visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!drawDraw)
{
    x = round(x);
    y = round(y);
    
    if (type != 7)
        draw_self();
        
    draw_set_font(font_default);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    if (type != 1 &amp;&amp; type != 7)
    {
        /*if (image_blend == color_find(17))
            draw_set_color(color_find(80));
        else if (image_blend == color_find(48))
            draw_set_color(c_black);
        else if (image_blend == color_find(44))
            draw_set_color(color_find(32));
        else draw_set_color(color_find(16));*/
        if (!showuni)
            draw_text(x, y, text);
        else
        {
            var chrtext = text;
            if (selection == 2.2)
                switch (chrtext)
                {
                    case 160: chrtext = "LShift"; break;
                    case 161: chrtext = "RShfit"; break;
                    case 162: chrtext = "LControl"; break;
                    case 163: chrtext = "RControl"; break;
                    case 164: chrtext = "LAlt"; break;
                    case 165: chrtext = "RAlt"; break;
                    
                    case 96: chrtext = "Num 0"; break;
                    case 97: chrtext = "Num 1"; break;
                    case 98: chrtext = "Num 2"; break;
                    case 99: chrtext = "Num 3"; break;
                    case 100: chrtext = "Num 4"; break;
                    case 101: chrtext = "Num 5"; break;
                    case 102: chrtext = "Num 6"; break;
                    case 103: chrtext = "Num 7"; break;
                    case 104: chrtext = "Num 8"; break;
                    case 105: chrtext = "Num 9"; break;
                    case 106: chrtext = "Num Multiply"; break;
                    case 107: chrtext = "Num Add"; break;
                    case 109: chrtext = "Num Subtract"; break;
                    case 110: chrtext = "Num Decimal"; break;
                    case 111: chrtext = "Num Divide"; break;
                    case 112: chrtext = "F1"; break;
                    case 113: chrtext = "F2"; break;
                    case 114: chrtext = "F3"; break;
                    case 115: chrtext = "F4"; break;
                    case 116: chrtext = "F5"; break;
                    case 117: chrtext = "F6"; break;
                    case 118: chrtext = "F7"; break;
                    case 119: chrtext = "F8"; break;
                    case 120: chrtext = "F9"; break;
                    case 121: chrtext = "F10"; break;
                    case 122: chrtext = "F11"; break;
                    case 123: chrtext = "F12"; break;
                    case 124: chrtext = "F13"; break;
                    case 125: chrtext = "F14"; break;
                    case 126: chrtext = "F15"; break;
                    case 8: chrtext = "Backspace"; break;
                    case 9: chrtext = "Tab"; break;
                    case 13: chrtext = "Enter"; break;
                    case 16: chrtext = "Shift"; break;
                    case 17: chrtext = "Control"; break;
                    case 20: chrtext = "Caps Lock"; break;
                    case 27: chrtext = "Esc"; break;
                    case 32: chrtext = "Spacebar"; break;
                    case 33: chrtext = "Page Up"; break;
                    case 34: chrtext = "Page Down"; break;
                    case 35: chrtext = "End"; break;
                    case 36: chrtext = "Home"; break;
                    case 37: chrtext = "Left"; break;
                    case 38: chrtext = "Up"; break;
                    case 39: chrtext = "Right"; break;
                    case 40: chrtext = "Down"; break;
                    case 45: chrtext = "Insert"; break;
                    case 46: chrtext = "Delete"; break;
                    case 144: chrtext = "Num Lock"; break;
                    case 145: chrtext = "ScrLk"; break;
                    case 19: chrtext = "Pause/Break"; break;
                    case 186: chrtext = ";"; break;
                    case 187: chrtext = "="; break;
                    case 189: chrtext = "-"; break;
                    case 191: chrtext = "/"; break;
                    case 192: chrtext = "`"; break;
                    case 219: chrtext = "["; break;
                    case 220: chrtext = "\"; break;
                    case 221: chrtext = "]"; break;
                    case 222: chrtext = "'"; break;
                    case 188: chrtext = ","; break;
                    case 190: chrtext = "."; break;
                    default: chrtext = chr(text); break;
                }
            if (string_lettersdigits(chrtext) == "")
                chrtext = text;
            draw_text(x, y, chrtext);
        }
    }
    if (type == 1)
    {
        draw_set_color(c_white);
        draw_rectangle(x - string_width(string(text)) / 2 - 1, round(y - string_height(string(text)) / 2), x + string_width(string(text)) / 2 + 2, round(y + string_height(string(text)) / 2), false);
        draw_set_color(c_gray);
        draw_rectangle(x - string_width(string(text)) / 2 - 2, round(y - string_height(string(text)) / 2 - 1), x + string_width(string(text)) / 2 + 2, round(y + string_height(string(text)) / 2), true);
        draw_set_color(c_black);
        draw_text(x, y, text);
    }
    if (type == 7)
    {
        //draw_set_color(color_find(colornum));
        draw_rectangle(x - 6, y - 6, x + 7, y + 7, false);
        draw_set_color(c_black);
    }
    draw_set_color(c_white);
    draw_set_valign(fa_bottom);
    draw_text(x, y - sprite_height / 2, message);
    draw_set_valign(fa_top);
    draw_text(x, y + sprite_height / 2, message2);
    draw_set_halign(fa_left);
    draw_set_color(c_black);
    if (showsprite != -1)
    {
        //if (colorswitch)
        //    if (!defaultcolors)
        //        var shadcomp = color_switch_set(drawc1, drawc2, drawc3, drawc4, drawc5, drawc6);//color_switch_set(obj_menu.c1colornum, obj_menu.c2colornum, obj_menu.c3colornum, obj_menu.c4colornum, obj_menu.c5colornum, obj_menu.c6colornum);
        //    else if (on != 0)
        //            var shadcomp = color_switch_set(player_default_color(charactername, 1), player_default_color(charactername, 2), player_default_color(charactername, 3), player_default_color(charactername, 4), player_default_color(charactername, 5), player_default_color(charactername, 6))
        //        else var shadcomp = color_switch_set(96, 80, 64, 48, 32, 16);
        if (drawframe)
        {
            draw_sprite_ext(spr_button, 0, round(x), round(y), 2, 2, 0, c_white, 1);
            if (on == 0)
                d3d_set_fog(true, c_gray, 0, 0);
            draw_sprite_part_ext(showsprite, 0, sprite_get_xoffset(showsprite) - 5, sprite_get_yoffset(showsprite) - 5, 10, 10, round(x) - 10 * window_get_width() / view_wview[0] / 3, round(y) - 10 * window_get_width() / view_wview[0] / 3, 2 * window_get_width() / view_wview[0] / 3, 2 * window_get_width() / view_wview[0] / 3, c_white, 1);
            d3d_set_fog(false, c_white, 0, 0);
        }
        else draw_sprite_ext(showsprite, 0, round(x), round(y), 1, 1, 0, c_white, 1);
        if (colorswitch)
            //if (shadcomp)
                shader_reset();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (drawDraw)
{
    //x = round(x);
    //y = round(y);
    
    if (type != 7)
        draw_self();
        
    draw_set_font(font_default);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    if (type != 1 &amp;&amp; type != 7)
    {
        /*if (image_blend == color_find(17))
            draw_set_color(color_find(80));
        else if (image_blend == color_find(48))
            draw_set_color(c_black);
        else if (image_blend == color_find(44))
            draw_set_color(color_find(32));
        else draw_set_color(color_find(16));*/
        if (!showuni)
            draw_text(x, y, text);
        else
        {
            var chrtext = text;
            if (selection == 2.2)
                switch (chrtext)
                {
                    case 160: chrtext = "LShift"; break;
                    case 161: chrtext = "RShfit"; break;
                    case 162: chrtext = "LControl"; break;
                    case 163: chrtext = "RControl"; break;
                    case 164: chrtext = "LAlt"; break;
                    case 165: chrtext = "RAlt"; break;
                    
                    case 96: chrtext = "Num 0"; break;
                    case 97: chrtext = "Num 1"; break;
                    case 98: chrtext = "Num 2"; break;
                    case 99: chrtext = "Num 3"; break;
                    case 100: chrtext = "Num 4"; break;
                    case 101: chrtext = "Num 5"; break;
                    case 102: chrtext = "Num 6"; break;
                    case 103: chrtext = "Num 7"; break;
                    case 104: chrtext = "Num 8"; break;
                    case 105: chrtext = "Num 9"; break;
                    case 106: chrtext = "Num Multiply"; break;
                    case 107: chrtext = "Num Add"; break;
                    case 109: chrtext = "Num Subtract"; break;
                    case 110: chrtext = "Num Decimal"; break;
                    case 111: chrtext = "Num Divide"; break;
                    case 112: chrtext = "F1"; break;
                    case 113: chrtext = "F2"; break;
                    case 114: chrtext = "F3"; break;
                    case 115: chrtext = "F4"; break;
                    case 116: chrtext = "F5"; break;
                    case 117: chrtext = "F6"; break;
                    case 118: chrtext = "F7"; break;
                    case 119: chrtext = "F8"; break;
                    case 120: chrtext = "F9"; break;
                    case 121: chrtext = "F10"; break;
                    case 122: chrtext = "F11"; break;
                    case 123: chrtext = "F12"; break;
                    case 124: chrtext = "F13"; break;
                    case 125: chrtext = "F14"; break;
                    case 126: chrtext = "F15"; break;
                    case 8: chrtext = "Backspace"; break;
                    case 9: chrtext = "Tab"; break;
                    case 13: chrtext = "Enter"; break;
                    case 16: chrtext = "Shift"; break;
                    case 17: chrtext = "Control"; break;
                    case 20: chrtext = "Caps Lock"; break;
                    case 27: chrtext = "Esc"; break;
                    case 32: chrtext = "Spacebar"; break;
                    case 33: chrtext = "Page Up"; break;
                    case 34: chrtext = "Page Down"; break;
                    case 35: chrtext = "End"; break;
                    case 36: chrtext = "Home"; break;
                    case 37: chrtext = "Left"; break;
                    case 38: chrtext = "Up"; break;
                    case 39: chrtext = "Right"; break;
                    case 40: chrtext = "Down"; break;
                    case 45: chrtext = "Insert"; break;
                    case 46: chrtext = "Delete"; break;
                    case 144: chrtext = "Num Lock"; break;
                    case 145: chrtext = "ScrLk"; break;
                    case 19: chrtext = "Pause/Break"; break;
                    case 186: chrtext = ";"; break;
                    case 187: chrtext = "="; break;
                    case 189: chrtext = "-"; break;
                    case 191: chrtext = "/"; break;
                    case 192: chrtext = "`"; break;
                    case 219: chrtext = "["; break;
                    case 220: chrtext = "\"; break;
                    case 221: chrtext = "]"; break;
                    case 222: chrtext = "'"; break;
                    case 188: chrtext = ","; break;
                    case 190: chrtext = "."; break;
                    default: chrtext = chr(text); break;
                }
            if (string_lettersdigits(chrtext) == "")
                chrtext = text;
            draw_text(x, y, chrtext);
        }
    }
    if (type == 1)
    {
        draw_set_color(c_white);
        draw_rectangle(x - string_width(string(text)) / 2 - 1, round(y - string_height(string(text)) / 2), x + string_width(string(text)) / 2 + 2, round(y + string_height(string(text)) / 2), false);
        draw_set_color(c_gray);
        draw_rectangle(x - string_width(string(text)) / 2 - 2, round(y - string_height(string(text)) / 2 - 1), x + string_width(string(text)) / 2 + 2, round(y + string_height(string(text)) / 2), true);
        draw_set_color(c_black);
        draw_text(x, y, text);
    }
    if (type == 7)
    {
        //draw_set_color(color_find(colornum));
        draw_rectangle(x - 6, y - 6, x + 7, y + 7, false);
        draw_set_color(c_black);
    }
    draw_set_color(c_white);
    draw_set_valign(fa_bottom);
    if (image_index == 1)
        draw_text(x, y - sprite_height / 2, message);
    draw_set_valign(fa_top);
    if (image_index == 1)
        draw_text(x, y + sprite_height / 2, message2);
    draw_set_halign(fa_left);
    draw_set_color(c_black);
    if (showsprite != -1)
    {
        //if (colorswitch)
        //    if (!defaultcolors)
        //        var shadcomp = color_switch_set(drawc1, drawc2, drawc3, drawc4, drawc5, drawc6);//color_switch_set(obj_menu.c1colornum, obj_menu.c2colornum, obj_menu.c3colornum, obj_menu.c4colornum, obj_menu.c5colornum, obj_menu.c6colornum);
        //    else if (on != 0)
        //            var shadcomp = color_switch_set(player_default_color(charactername, 1), player_default_color(charactername, 2), player_default_color(charactername, 3), player_default_color(charactername, 4), player_default_color(charactername, 5), player_default_color(charactername, 6))
        //        else var shadcomp = color_switch_set(96, 80, 64, 48, 32, 16);
        if (drawframe)
        {
            draw_sprite_ext(spr_button, 0, round(x), round(y), 2, 2, 0, c_white, 1);
            if (on == 0)
                d3d_set_fog(true, c_gray, 0, 0);
            draw_sprite_part_ext(showsprite, 0, sprite_get_xoffset(showsprite) - 5, sprite_get_yoffset(showsprite) - 5, 10, 10, round(x) - 10 * window_get_width() / view_wview[0] / 3, round(y) - 10 * window_get_width() / view_wview[0] / 3, 2 * window_get_width() / view_wview[0] / 3, 2 * window_get_width() / view_wview[0] / 3, c_white, 1);
            d3d_set_fog(false, c_white, 0, 0);
        }
        else draw_sprite_ext(showsprite, 0, round(x), round(y), 1, 1, 0, c_white, 1);
        if (colorswitch)
            //if (shadcomp)
                shader_reset();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,12</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
